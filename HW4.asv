clc; clear; close all;

%% HW 4 ASTE 585

% design an attitude controller for the pitch axis of a satellite 

%% Parameter definition

global param

param.Ix = 90;
param.Iy = 80;
param.Iz = 100;

Ix = param.Ix;
Iy = param.Iy;
Iz = param.Iz; 

param.Hb = 27;
Hb = param.Hb;

param.w0 = 2*pi/(60*60*24);
w0 = param.w0;

% Initial guesses for parameters
param.kf = 5.2; % Adjust this value
kf = param.kf;

param.ki = 0.01; % Adjust this value
ki = param.ki;

param.alpha = 0.5; % Adjust this value
alpha = param.alpha;

param.beta = 27; % Adjust this value
beta = param.beta;

s = tf('s');
K_s = -kf*(1+(ki/s))*((s+alpha)/(s+beta));

%% define pitch transfer function (theta/Tcy)

Ix = param.Ix;
Iz = param.Iz;
w0 = param.w0;

G_theta_s_num = 1;
G_theta_s_den = [Iy,0,0];
G_theta_s = tf(G_theta_s_num,G_theta_s_den);

%% define close loop transfer function 

H = 1; % perfect feedback
G_open_loop = K_s*G_theta_s;
G_close_loop = feedback(G_open_loop,H);

% Step response analysis
figure(1);
step(G_close_loop);
stepinfo(G_close_loop)

% Bode plot analysis
figure(2);
bode(G_close_loop);

% Adjust kf, ki, alpha, and beta to meet requirements
% Use the stepinfo function to get overshoot and other metrics
% Use the bandwidth function to get the bandwidth of the system

info = stepinfo(G_close_loop);
overshoot = info.Overshoot;
bw = bandwidth(G_close_loop);

fprintf('Overshoot: %f\n', overshoot);
fprintf('Bandwidth: %f rad/sec\n', bw);

% Iterate to adjust parameters based on the results
% Example adjustments (these would typically be done manually based on the output)
% param.kf = new_kf;
% param.ki = new_ki;
% param.alpha = new_alpha;
% param.beta = new_beta;
%% GUI
function satellite_attitude_control_gui
    % Create the main figure
    fig = uifigure('Name', 'Satellite Attitude Control Tuning', 'Position', [100, 100, 800, 600]);

    % Create axes for plots
    ax1 = uiaxes('Parent', fig, 'Position', [50, 300, 700, 250], 'Title', 'Step Response');
    ax2 = uiaxes('Parent', fig, 'Position', [50, 20, 700, 250], 'Title', 'Bode Plot');

    % Create sliders and labels for tuning parameters
    createSlider(fig, 'K_f', [50, 260, 700, 20], [50, 280, 100, 20], @updatePlots);
    createSlider(fig, 'K_i', [50, 230, 700, 20], [50, 250, 100, 20], @updatePlots);
    createSlider(fig, 'Alpha', [50, 200, 700, 20], [50, 220, 100, 20], @updatePlots);
    createSlider(fig, 'Beta', [50, 170, 700, 20], [50, 190, 100, 20], @updatePlots);

    % Initial plot
    updatePlots();

    function createSlider(parent, name, position, labelPosition, callback)
        uilabel(parent, 'Position', labelPosition, 'Text', name);
        uislider(parent, 'Position', position, 'Limits', [0, 10], 'ValueChangedFcn', callback, ...
            'Tag', name, 'Value', 5);
    end

    function updatePlots(~, ~)
        % Get parameter values from sliders
        kf = findobj(fig, 'Tag', 'K_f').Value;
        ki = findobj(fig, 'Tag', 'K_i').Value;
        alpha = findobj(fig, 'Tag', 'Alpha').Value;
        beta = findobj(fig, 'Tag', 'Beta').Value;

        % Update transfer function
        s = tf('s');
        K_s = -kf*(1+(ki/s))*((s+alpha)/(s+beta));

        Ix = 90;
        Iy = 80;
        Iz = 100;

        G_theta_s_num = 1;
        G_theta_s_den = [Iy, 0, 0];
        G_theta_s = tf(G_theta_s_num, G_theta_s_den);

        H = 1;
        G_open_loop = K_s*G_theta_s;
        G_close_loop = feedback(G_open_loop, H);

        % Plot step response
        cla(ax1);
        step(ax1, G_close_loop);
        stepinfo(G_close_loop);

        % Plot Bode plot
        cla(ax2);
        bode(ax2, G_close_loop);

        % Display overshoot and bandwidth
        info = stepinfo(G_close_loop);
        overshoot = info.Overshoot;
        bw = bandwidth(G_close_loop);

        fprintf('Overshoot: %f\n', overshoot);
        fprintf('Bandwidth: %f rad/sec\n', bw);
    end
end